#!/usr/bin/env python

import os

import libgreader
import cairo
import gtk
import gobject
import rsvg
import Image

import gnomekeyring

app_name = 'google-reader-notification'

def convert_format(data, width, height, in_format, out_format):
	# PIL uses big-endian as well
	img = Image.frombuffer(
		out_format,
		(width, height),
		data,
		'raw',
		in_format,
		0,
		1
	)

	return img.tostring('raw', out_format, 0, 1)


def get_resource(name):
	return os.path.join(os.path.dirname(__file__), name)


def pixbuf_from_surface(surface):
	# GDKs format: RGBA or RGB, big endian byte order
	# cairos format: ARGB or XRGB, little endian byte order
	#             => BGRA or BGRX
	#                             (at least on x86/AMD64)
	if cairo.FORMAT_ARGB32 == surface.get_format():
		in_format = 'BGRA'
		out_format = 'RGBA'
		alpha = True
		stride = surface.get_width()*4
	elif cairo.FORMAT_RGB24 == surface.get_format():
		in_format = 'BGRX'
		out_format = 'RGB'
		alpha = False
		stride = surface.get_width()*3
	else: raise Exception('Can only handle RGB or RGBA formats.')

	data = convert_format(
		surface.get_data(),
		surface.get_width(),
		surface.get_height(),
		in_format,
		out_format
	)

	pixbuf = gtk.gdk.pixbuf_new_from_data(
		data = data,
		colorspace = gtk.gdk.COLORSPACE_RGB,
		has_alpha = alpha,
		bits_per_sample = 8,
		width = surface.get_width(),
		height = surface.get_height(),
		rowstride = stride
	)

	return pixbuf


class FeedIcon(gtk.StatusIcon):
	def  __init__(self, background_file, *args, **kwargs):
		super(FeedIcon, self).__init__(*args, **kwargs)
		self.unread_count = 0
		self.connect('size-changed', self.on_size_changed, None)

		# load background
		with file(background_file) as f:
			self.icon_code = f.read()

	def on_size_changed(self, status_icon, size, statusicon):
		self.size = size

		# create new pixbuf with correct size
		self.redraw()

	def redraw(self):
		# create new cairo surface
		surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, self.size, self.size)

		# context scaled to 1.0/1.0
		cr = cairo.Context(surface)
		cr.scale(self.size, self.size)

		# adjust icon
		icon_str = ""
		if self.unread_count:
			if self.unread_count > 99:
				icon_str = '99+'
			else:
				icon_str = str(self.unread_count)
		new_icon_code = self.icon_code % {'rss_number': icon_str}
		svg_handle = rsvg.Handle(data = new_icon_code)

		# render background
		cr.save()
		cr.scale(1./svg_handle.get_property('width'), 1./svg_handle.get_property('height'))
		svg_handle.render_cairo(cr)
		cr.restore()

		# fetch
		pixbuf = pixbuf_from_surface(surface)

		# set icon from pixbuf
		self.set_from_pixbuf(pixbuf)


class GoogleReaderIcon(FeedIcon):
	icon_file = get_resource('icon.svg')
	keyring_attrs = {
		'protocol': 'Google Reader',
	}
	startup_file = os.path.join(os.path.expanduser('~'), '.config', 'autostart', app_name + '.desktop')

	def __init__(self, glade_file):
		super(GoogleReaderIcon, self).__init__(self.icon_file)
		self.init_reader()

		self.timeout_source = None
		builder = gtk.Builder()
		builder.add_from_file(glade_file)

		self.menu = builder.get_object('tray_menu')
		self.preferences_dialog = builder.get_object('preferences_dialog')

		self.connect('popup-menu', self.on_popup_menu)

		preferences_action = builder.get_object('a_open_preferences')
		preferences_action.connect('activate', self.on_open_preferences)

		self.preferences_username = builder.get_object('tx_username')
		self.preferences_password = builder.get_object('tx_password')

		self.menuitem_startup = builder.get_object('mn_startup')
		self.menuitem_startup.set_active(os.path.exists(self.startup_file))
		self.menuitem_startup.connect('toggled', self.on_menuitem_startup_toggled)

	def init_reader(self):
		try:
			username, password = self.read_username_password()
			auth = libgreader.ClientAuth(username, password)
			self.reader = libgreader.GoogleReader(auth)
		except gnomekeyring.NoMatchError:
			# no credentials entered
			self.reader = None

	def on_popup_menu(self, status_icon, button, activate_time):
		self.menu.popup(None, None, None, button, activate_time)

	def on_menuitem_startup_toggled(self, menuitem):
		if menuitem.get_active():
			data = file(get_resource(app_name + '.desktop')).read()
			data %= {'exec': os.path.abspath(__file__)}
			# active, make sure startup works
			with file(self.startup_file, 'w') as out:
				out.write(data)
		else:
			# inactive, remove startup if it exists
			if os.path.exists(self.startup_file): os.unlink(self.startup_file)

	def on_open_preferences(self, *args):
		if self.preferences_dialog.run():
			# save new data
			username = self.preferences_username.get_text()
			password = self.preferences_password.get_text()

			assert gnomekeyring.is_available()
			keyring = gnomekeyring.get_default_keyring_sync()

			# remove all previous instances
			try:
				for item in gnomekeyring.find_items_sync(gnomekeyring.ITEM_NETWORK_PASSWORD, self.keyring_attrs):
					gnomekeyring.item_delete_sync(item.keyring, item.item_id)
			except gnomekeyring.NoMatchError:
				pass

			attrs = self.keyring_attrs.copy()
			attrs['username'] = username
			gnomekeyring.item_create_sync(keyring, gnomekeyring.ITEM_NETWORK_PASSWORD, 'Google Reader', attrs, password, True)

			# update
			self.init_reader()
			self.redraw()

		self.preferences_dialog.hide()

	def read_username_password(self):
			keyring = gnomekeyring.get_default_keyring_sync()
			items = gnomekeyring.find_items_sync(gnomekeyring.ITEM_NETWORK_PASSWORD, self.keyring_attrs)
			assert(1 == len(items))

			return items[0].attributes['username'], items[0].secret


	@property
	def unread_count(self):
		if self.reader:
			self.update()
			return self._unread_count
		else:
			return None

	@unread_count.setter
	def unread_count(self, val):
		self._unread_count = val

	def update(self):
		if self.reader:
			self.reader.buildSubscriptionList()
			self._unread_count = sum( feed.unread for feed in self.reader.feeds if feed.unread )

	def set_update_interval(self, seconds):
		def call_update():
			self.redraw()
			return True

		if self.timeout_source: gobject.source_remove(self.timeout_source)

		self.timeout_source = gobject.timeout_add(seconds * 1000, call_update) # every 5 minutes


if '__main__' == __name__:
	# load data from config file (FIXME: use GUI,
	# gconf and gnome keyring)
	import os
	import yaml

	glade_file = get_resource(app_name + '.glade')
	gobject.set_application_name(app_name)

	icon = GoogleReaderIcon(glade_file)
	icon.set_update_interval(5*60)

	gtk.main()
